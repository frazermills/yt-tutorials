#+title: Quicksort

* What is Quick Sort?
** Divide and Conquer
- Splits the list
- Breaks down the problem into smaller sub-problems
*** Other Examples
**** Merge Sort
**** Karatsuba Algorithm
** Recursive
- Doing quicksort on a list is the same as splitting the list and doing quicksort on the sub-lists

* Quick Sort in Haskell
** Code
#+begin_src haskell
quicksort []     = []
quicksort (x:xs) = quicksort left ++ [x] ++ quicksort right
                   where
                     left = [a | a <- xs, a <= x]
                     right = [b | b <- xs, b > x]
#+end_src
#+begin_src haskell
[1, 4, 2, 3, 6, 0]
quicksort [0] ++ [1] ++ quicksort [4, 2, 3, 6]
quicksort [] ++ [0] ++ [] ++ [1] ++ quicksort [2, 3] ++ [4] ++ quicksort [6]
quicksort [] ++ [0] ++ [] ++ [1] ++ [] ++ [2] ++ quicksort [3] ++ [4] ++ [] ++ [6] ++ []
[] ++ [0] ++ [] ++ [1] ++ [] ++ [2] ++ [] ++ [3] ++ [] ++ [4] ++ [] ++ [6] ++ []
[0, 1, 2, 3, 4, 6]
#+end_src
*** Is this a 'True' implementation of Quick Sort?
- See this post about it: [[https://stackoverflow.com/questions/7717691/why-is-the-minimalist-example-haskell-quicksort-not-a-true-quicksort][here]]
**** Does it really do "partition the elements in-place"?
