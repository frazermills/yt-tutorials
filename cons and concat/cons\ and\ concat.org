#+title: Cons And Concatenation

* What is Cons?
** Adds a single element to the front of a list
*** Examples
#+begin_src haskell
1 : [2, 3, 4]
#+end_src

#+RESULTS:
| 1 | 2 | 3 | 4 |

#+begin_src haskell
8 : [5..9]
#+end_src

#+RESULTS:
| 8 | 5 | 6 | 7 | 8 | 9 |

** Constant Time Complexity
- Always adds to the beginning of the list so takes same amount of time no matter length of list
** Type Definition
#+begin_src haskell
(:) :: a -> [a] -> [a]
#+end_src
** Right Associative
*** x : y : zs ---> x : qs

* What is Concatenation?
** Adds two lists together
*** Examples
#+begin_src haskell
[1, 2, 3, 4] ++ [5, 6]
#+end_src

#+RESULTS:
| 1 | 2 | 3 | 4 | 5 | 6 |

#+begin_src haskell
[1..7] ++ [-10..2]
#+end_src

#+RESULTS:
| 1 | 2 | 3 | 4 | 5 | 6 | 7 | -10 | -9 | -8 | -7 | -6 | -5 | -4 | -3 | -2 | -1 | 0 | 1 | 2 |

#+begin_src haskell
"Frazer" ++ "like haskell"
#+end_src

#+RESULTS:
: Frazerlike haskell

** Linear Time Complexity
- Will increase how long it takes to perform operation depending on how many items in each list
** Type Definition
#+begin_src haskell
(++) :: [a] -> [a] -> [a]
#+end_src

* Lists and Cons
** Internal Representations of List
#+begin_src haskell
[1, 2, 3, 4] ---> 1:(2:(3:(4:[])))
#+end_src
#+begin_src haskell
1:(2:(3:(4:[])))
#+end_src

#+RESULTS:
| 1 | 2 | 3 | 4 |

* Patterns and Cons
** Head function
#+begin_src haskell
head :: [a] -> a
head (x:_) = x
head [1..5]
#+end_src

#+RESULTS:
: 1

** Tail Function
#+begin_src haskell
tail :: [a] -> [a]
tail (_:xs) = xs
tail [1..5]
#+end_src

#+RESULTS:
| 2 | 3 | 4 | 5 |

* Concatenation in a function
** Reverse a list
#+begin_src haskell
reverse :: [a] -> [a]
reverse [] = []
reverse (x:xs) = reverse xs ++ [x]

reverse [1, 2, 3]
reverse [2, 3] ++ [1]
reverse [3] ++ [2] ++ [1]
reverse [] ++ [3] ++ [2] ++ [1]
[] ++ [3] ++ [2] ++ [1]
[3, 2, 1]
#+end_src
